# unlink _____________________________________________________
# long sys_unlink(const char __user * pathname)
#

@define _SYSCALL_UNLINK_NAME
%(
	name = "unlink"
%)

@define _SYSCALL_UNLINK_ARGSTR
%(
	argstr = pathname
%)

@define _SYSCALL_UNLINK_REGARGS
%(
	pathname_uaddr = pointer_arg(1)
	pathname = user_string_quoted(pathname_uaddr)
	pathname_unquoted = user_string_nofault(pointer_arg(1))
%)

@define _SYSCALL_UNLINK_REGARGS_STORE
%(
        if (@probewrite(pathname_uaddr))
          set_pointer_arg(1, pathname_uaddr)

	if (@probewrite(pathname_unquoted))
	  set_user_string_arg(pointer_arg(1), pathname_unquoted)
%)

probe syscall.unlink = dw_syscall.unlink !, nd_syscall.unlink ? {}
probe syscall.unlink.return = dw_syscall.unlink.return !,
                              nd_syscall.unlink.return ? {}

# dw_unlink _____________________________________________________

probe dw_syscall.unlink = @syscall_call("sys_unlink")
{
	@_SYSCALL_UNLINK_NAME
	pathname_uaddr = $pathname
	pathname = user_string_quoted($pathname)
	@_SYSCALL_UNLINK_ARGSTR
}
probe dw_syscall.unlink.return = @syscall_return("sys_unlink")
{
	@_SYSCALL_UNLINK_NAME
	@SYSC_RETVALSTR($return)
}

# nd_unlink _____________________________________________________

probe nd_syscall.unlink = nd1_syscall.unlink!, nd2_syscall.unlink!, tp_syscall.unlink
  { }

probe nd1_syscall.unlink = kprobe.function("sys_unlink") ?
{
	@_SYSCALL_UNLINK_NAME
	asmlinkage()
	@_SYSCALL_UNLINK_REGARGS
	@_SYSCALL_UNLINK_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.unlink = kprobe.function(@arch_syscall_prefix "sys_unlink") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_UNLINK_NAME
	@_SYSCALL_UNLINK_REGARGS
	@_SYSCALL_UNLINK_ARGSTR
},
{
        %( @_IS_SREG_KERNEL %? @_SYSCALL_UNLINK_REGARGS_STORE %)
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.unlink = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_unlink"), @const("__NR_compat_unlink"))
	@_SYSCALL_UNLINK_NAME
	@_SYSCALL_UNLINK_REGARGS
	@_SYSCALL_UNLINK_ARGSTR
},
{
        %( @_IS_SREG_KERNEL %? @_SYSCALL_UNLINK_REGARGS_STORE %)
}

probe nd_syscall.unlink.return = nd1_syscall.unlink.return!, nd2_syscall.unlink.return!, tp_syscall.unlink.return
  { }

probe nd1_syscall.unlink.return = kprobe.function("sys_unlink").return ?
{
	@_SYSCALL_UNLINK_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.unlink.return = kprobe.function(@arch_syscall_prefix "sys_unlink").return ?
{
	@_SYSCALL_UNLINK_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.unlink.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_unlink"), @const("__NR_compat_unlink"))
	@_SYSCALL_UNLINK_NAME
	@SYSC_RETVALSTR($ret)
}
